Map, Reduce, Filter

  import React from 'react';

  export default class App extends React.Component {
    render() {
    var greeting = 'Welcome to React';
      return (
        <div>
          <h1>{greeting}</h1>
        </div>
      );
    }
  }

  You only need to use curly braces to get your JS in HTML
  Rendering complex object is just as easy

  import React from 'react';

  export default class App extends React.Component {
    render() {
      var user = { name: 'Robin' };
      return (
        <div>
          <h1>{user.name}</h1>
        </div>
      );
    }
  }

  Now how about a list of users?
  No React specific API such as custom HTML tag attribute
  Use plain JS to iterate
  Map creates new array with result of calling user written function
    on every element in coding array
    Basically doing a for loop, minus the boilerplate

  import React from 'react';

  export default class App extends React.Component {
    render() {
      var users = [
        { name: 'Robin' },
        { name: 'Markus' },
      ];

      return (
        <ul>
          {users.map(function (user) {
            return <li>{user.name}</li>;
          })}
        </ul>
      );
    }
  }

  Now let's use an arrow function to make more concise

  import React from 'react';

  export default class App extends React.Component {
    render() {
      var users = [
        { name: 'Robin' },
        { name: 'Markus' },
      ];

      return (
        <ul>
          {users.map(user => <li>{user.name}</li>)};
        </ul>
      );
    }
  }

  Filter is the same deal

  import React from 'react';

  export default class App extends React.Component {
    render() {
      var users = [
        { name: 'Robin', isDeveloper: true },
        { name: 'Markus', isDeveloper: false },
        { name: 'John', isDeveloper: true },
      ];

      return (
        <ul>
          {users
            .filter(user => user.isDeveloper)
            .map(user => <li>{user.name}</li>)
          }
        </ul>
      );
    }
  }

  squared = notSquared.map(val => val * val);

  Does not talk about reduce
  Reduce is an accumulator

  function sum(arr) {
    let sum = 0;
    for (const val of arr) {
      sum += val;
    }
    return sum;
  }

  function sum(arr) {
    const reducer = (sum, val) => sum + val;
    const initialValue = 0;
    return arr.reduce(reducer, initialValue);
  }

  const lineItems = [
    { description: 'Eggs (Dozen)', quantity: 1, price: 3, total: 3 },
    { description: 'Cheese', quantity: 0.5, price: 5, total: 2.5 },
    { description: 'Butter', quantity: 2, price: 6, total: 12 }
  ];

  lineItems.reduce((sum, li) => sum + li.total, 0); // 17.5
  // Better
  lineItems.map(li => li.total).reduce((sum, val) => sum + val, 0);