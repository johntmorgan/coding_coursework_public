#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed May  3 16:54:49 2023

@author: johnmorgan
"""

# O(n^2) time
# O(n) size - making parent, rank arrays

from malware_union_find import UnionFind

def min_malware_spread(graph, initial):
    uf = UnionFind(len(graph))
    for row_index in range(len(graph)):
        for col_index in range(len(graph[0])):
            if graph[row_index][col_index] == 1:
                uf.union(row_index, col_index)
    infected = {}
    for parent in uf.parent:
        if parent in infected:
            infected[parent] += 1
        else:
            infected[parent] = 1
    nodes = {}
    for parent_index, parent in enumerate(uf.parent):
        if parent_index in initial:
            if parent in nodes:
                nodes[parent] += 1
            else:
                nodes[parent] = 1
    max_saved = 0
    best_node = None
    for candidate in initial:
        if nodes[uf.parent[candidate]] == 1:
            if infected[uf.parent[candidate]] > max_saved:
                best_node = candidate
                max_saved = infected[uf.parent[candidate]] 
    if not best_node:
        return initial[0]
    return best_node


graph = [[1,1,0],[1,1,0],[0,0,1]]
initial = [0, 1]
print(min_malware_spread(graph, initial))

graph = [[1,0,0],[0,1,1],[0,1,1]]
initial = [1, 2]
print(min_malware_spread(graph, initial))

graph = [[1,0,0],[0,1,0],[0,0,1]]
initial = [0, 1]
print(min_malware_spread(graph, initial))
