Just doing some practice problems for review, noting anything interesting

To see if MySQL running locally
  ps -ef | grep 'mysql'

Start MySQL on Mac
  sudo launchctl load /Library/LaunchDaemons/com.oracle.oss.mysql.mysqld.plist

Stop MySQL on Mac
  sudo launchctl unload /Library/LaunchDaemons/com.oracle.oss.mysql.mysqld.plist

Start MySQL on Linux
  service mysql start

Stop MySQL on Linux
  service mysql stop

DELETE FROM Customers;
  // Deletes all rows from customers without asking confirmation

How do you show all customers who haveat least three “O”s in their name?
  select * from customers where name like '%o%o%o%';

Create a table challenge
  CREATE DATABASE school_db
  CREATE TABLE students (id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY, first_name VARCHAR(50) NOT NULL,
  last_name VARCHAR(100) NOT NULL);

  INSERT INTO students (first_name, last_name)
  VALUES ('John', 'Smith'), ('Mary', 'Foo'), ('Paul', 'Woo');
  SELECT * FROM students;

  UPDATE students SET last_name = 'Carl' WHERE last_name = 'Smith';
  SELECT * FROM students;

  DELETE FROM students WHERE last_name LIKE "%o%o";
  SELECT * FROM students WHERE last_name LIKE "w_%" // length 2

Add a column
  ALTER TABLE students ADD COLUMN (address VARCHAR(255) NOT NULL);

Create index on 2 cols
  CREATE INDEX students_last_name_first_name_idx ON students(last_name, first_name);

Insert dupe name
  CREATE UNIQUE INDEX products_name_uidx on products(name);
  INSERT INTO products (name, price)
  VALUES ('Avengers', '42.00');

Quiz
  CREATE TABLE items (
      item_id INT(10) NOT NULL AUTO_INCREMENT PRIMARY KEY,
      description VARCHAR(255) NOT NULL,
      rate DECIMAL(7,2) NOT NULL
  );
  CREATE UNIQUE INDEX products_description_uidx on items(description);
  SELECT COUNT(*) FROM items;
  SELECT COUNT(*) FROM items WHERE rate > 10;
  SELECT * FROM items ORDER BY description;
  SELECT * FROM items ORDER BY rate DESC;
  SELECT * FROM items ORDER BY price DESC LIMIT 1;

Foreign Key
  ALTER TABLE Orders ADD CONSTRAINT orders_customer_fk
  FOREIGN KEY(customer_id)
  REFERENCES customers(id);

  CREATE TABLE order_items (
    id INT(11) NOT NULL AUTO_INCREMENT,
    order_id INT(11) NOT NULL,
    product_id INT(11) NOT NULL,
    price NUMERIC(15, 2) NOT NULL,
    quantity INT(11),
    PRIMARY KEY(id)
  );

  ALTER TABLE order_items
  ADD CONSTRAINT order_items_order_fk
  FOREIGN KEY(order_id)
  REFERENCES orders(id);

  ALTER TABLE order_items
  ADD CONSTRAINT order_items_product_fk
  FOREIGN KEY(product_id)
  REFERENCES products(id);

  CREATE TABLE students (
    id INT(11) NOT NULL AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    address VARCHAR(255) NOT NULL.
    date_of_registration DATE,
    PRIMARY KEY(id)
  );
  CREATE UNIQUE INDEX students_name_uidx on students(name);

  CREATE TABLE courses (
    id INT(11) NOT NULL AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    PRIMARY KEY(id)
  );
  CREATE UNIQUE INDEX courses_name_uidx on courses(name);

  CREATE TABLE student_courses(
    id INT(11) NOT NULL AUTO_INCREMENT,
    student_id INT(11) NOT NULL,
    course_id INT(11) NOT NULL,
    enrollment_date DATE NOT NULL,
    PRIMARY KEY(id)
  );
  ALTER TABLE student_courses ADD CONSTRAINT student_courses_student_fk
  FOREIGN KEY(student_id) REFERENCES students(id);
  ALTER TABLE student_courses ADD CONSTRAINT student_courses_course_fk
  FOREIGN KEY(course_id) REFERENCES courses(id);
  CREATE UNIQUE INDEX student_courses_student_course_uidx on courses(student_id, course_id);

  SELECT COUNT(DISTINCT orders.customer_id) FROM orders;
  SELECT COUNT(DISTINCT customers.id) FROM customers JOIN orders ON orders.customer_id = customers.id;

  SELECT * FROM customers LEFT JOIN orders ON customers.id = orders.customer_id
  WHERE orders.id IS NULL;

  SELECT COUNT(*) FROM customers LEFT JOIN orders ON customers.id = orders.customer_id
  WHERE orders.id IS NULL;

  // Just see customers table
  SELECT customers.* FROM customers LEFT JOIN orders ON customers.id = orders.customer_id
  WHERE orders.id IS NULL;

  SELECT order_items.order_id, SUM(price * quantity) AS amount_per_order
  FROM order_items GROUP BY order_id;

  SELECT customers.id AS customer_id, name, identity, customer_totals.total_amount
  FROM customers
  JOIN (
    SELECT customer_id, sum(price * quantity) AS total_amount
    FROM order_items
    JOIN orders ON orders.id = order_items.order_id
    GROUP BY customer_id
    ORDER BY total_amount desc limit 1
  ) AS customer_totals on customer_totals.customer_id = customers.id;

  SELECT DISTINCT name
  FROM students
  INNER JOIN student_courses
  ON students.id = student_courses.student_id;

  SELECT courses.name, count(student_courses.student_id) AS students_registered
  FROM courses
  INNER JOIN student_courses on courses.id = student_courses.course_id
  GROUP BY courses.name;

  SELECT COUNT(distinct students.name) AS Total_students_registered
  FROM students
  JOIN student_courses
  ON students.id = student_courses.student_id;