Sharing state - row and seat
  Rows in venue body same as before - but now passing # of tickets as a new prop
  Row component has gotten more functionality, some taken from seat
    Seat does not contain all status data anymore

  import * as React from "react"
  import Seat from "../components/seat"

  interface RowProps {
    rowNumber: number
    seatsInRow: number
    ticketsToBuy: number
  }

  const Row = (props: RowProps) => {
    const [seatStatuses, setSeatStatuses] = React.useState(
      Array.from(Array(props.seatsInRow).keys()).map(() => "open")
    )

    function isSeatValid(seatNumber): boolean {
      if (seatNumber + props.ticketsToBuy > props.seatsInRow) {
        return false
      }
      for (let i = 1; i < props.ticketsToBuy; i++) {
        if (seatStatuses[seatNumber + i]) == "held") {
          return false
        }
      }
    }
    return true

    function validSeatStatus(seatNumber): string {
      if (seatStatuses[seatNumber] === "held") {
        return "held"
      } else {
        return isSeatValid(seatNumber) ? "open" : "invalid"
      }
    }

    function newState(oldStatus: string): string {
      if (oldStatus === "open") {
        return "held"
      } else if (oldStatus === "held") {
        return "open"
      } else {
        return "invalid"
      }
    }

    function onSeatChange(seatNumber: number): void {
      if (validSeatStatus(seatNumber) === "invalid") {
        return
      }
      setSeatStatuses(
        seatStatuses.map((status, index) => {
          if (index >= seatNumber && index < seatNumber + props.ticketsToBuy) {
            return newState(seatStatuses[seatNumber])
          } else {
            return status
          }
        })
      )
    }

    const seatItems = Array.from(Array(props.seatsInRow).keys()).map(
      seatNumber => {
        return (
          <Seat
            key={seatNumber}
            seatNumber={seatNumber}
            status={validSeatStatus(seatNumber)}
            clickHandler={onSeatChange}
          />
        )
      }
    )

    return <tr>{seatItems}</tr>
  }

  export default Row

// This component does two key things
  Tracks seat status in array
  Defines click handler to be executed when a seat is clicked
  The row component passes the handler function as a prop to the Seat component, clickHandler
  First call useState hook on line 11
    Create array of seat statuses
  Initial value is an array of open values for each seat in row
  Using an array/object as value of state works a little differently
    Remember argument to useState only applied when component drawn
    Don't want argument to useState method to be dynamic
      Here just an array of open values, don't expect number of seats in row to change
        We'll talk about how to update state on re-render in server chapter
  To trigger a re-render based on changing state, create new array
    Just updating element in array won't do it
    Can trigger a re-render based on changing an object attribute
  Row is going to store state value whether seat open or held
    Going to calculate separately if seat is valid
  Why calculate validity on the fly?
    Server deals with seats actually selected later
    Separate UI concerns from data concerns
  Look at return
    Now sending 4 props to each seat
      Already sent key and seatNumber
      Now status, calculated by validSeatStatus
      Finally a function, clickHandler={onSeatChange}
        Sending function object onSeatChange, not calling the function
  This pattern is very common
    Parent component holds state for all children
    Sends functions down as props for childen to receive events that change state
      Good if component hierarchy isn't very deep
      And state is easily encapsulated as set of components
  Row component has two functions for determining the status of a seat based on number
    validSeatStatus
    isSeatValid
  Row component has two functions for determining status of seat based on number
    isSeatValid - returns boolean based on how close seat is to edge of row and whether held
    validSeatStatus - converts that boolean into a status string to send to Seat
  Two functions to manage new state of seat after clicked
    newState taken from Seat component
      Now managed here, just toggles open to held and back
    onSeatChange click handler more complicated
      If invalid, just return doing nothing
      If valid, call setSeatStatuses
        That's the function created by the useState hook
        Adjust the seat statuses
          Can't just adjust a single seat status
          Must rebuild array to trigger re-render
        Use map to create a new array from the old array
          If seat was clicked or in range on right, toggle status
          If not, pass state through
      Wind up with new array with new values for affected seats, same value for unaffected

Seat is now simpler since it doesn't manage its own state

  import * as React from "react"

  interface SeatProps {
    seatNumber: number
    status: string
    clickHandler: (seatNumber: number) => void
  }

  export const Seat = ({ seatNumber, status, clickHandler }: SeatProps) => {
    function stateDisplayClass(): string {
      if (status === "open") {
        return "has-background-white"
      } else if (status === "held") {
        return "has-background-success"
      } else {
        return "has-background-warning"
      }
    }

    function changeState(): void {
      clickHandler(seatNumber)
    }

    return (
      <td>
        <span className={`button ${stateDisplayClass()}`} onClick={changeState}>
          {seatNumber}
        </span>
      </td>
    )
  }

  export default Seat

// Interface that defines props
  Including clickHandler prop
  Defined as a function that takes a number and does not have a return value
    When Seat declared, JS destructuring assigns props to values directly
      No props object used
      Common when few prop values
  Define two functions
    First converts status into Bulma CSS class
    On click, now call changeState function
      changeState function calls clickHandler
        This is the function defined by Row and passed into props
      control goes back to Row when clickHandler called
        There the statuses are updated and the row is redrawn
  Passing handlers down and state up is common in React
    But can get complicated as page gets larger
      There's more options, to be discussed
      Reducer is a key concept

Stimulus vs React
  React has more setup, more boilerplate code
  These pages are simple - so more React for them
  As pages get more complex, more Stimulus code to write
    You can see this in the complexity of seat logic in Stimulus
  Real world?
    Stimulus early phases were really easy
      Code got a little tangled as things got more complex
      Still was a great choice for the project
    Also React is designed to make update loop efficient
    Ad hoc update in Stimulus is not
      Some benefits because doing less
      Some page load benefits because Stimulus is a smaller library
      At some point have to get serious about code performance though
