CSS and React components
  React encourages thinking about CSS with code, rather than separating like Stimulus
  Tons of libraries to handle
  Let's talk about one: styled-components
  Define React components with CSS styles inside component definition
  When component renders, styled-components generates CSS code
    Definitions for styles, uses generated CSS class names in rendered markup
  Attach CSS definitions to internal markup of div, span
  Why bundle CSS with React
    Easy to see what CSS applies, it's right there
    Better separation of styling from logic
      Logic components are cleaner
    Gives some protection against style bugs
      Prevents unused CSS from being sent to page
    styled-components has nice support for global properties
  Challenges
    Syntax is meh especially for dynamic properties, esp w/TS
      Probably want an editor plugin to help out
    Can be hard to debut resulting CSS w/o additiona plugins

  $ yarn add styled-components
  $ yarn add @types/styled-components
  $ yarn add babel-plugin-styled-components --dev

  Must add babel plugin to plugins section of babel.config.js

Let's make a styled component VenueHeader
  Change styling of text prompt and manage spacing
  Otherwise functionality is the same
  Using method styled followed by method span
  For now structure to remember is styled, HTML tag, CSS string
  Return value is a React component called Header
    Use component in JSX like any other component
      Just works
    Text inside call to header gets passed through as a child and displayed normally
  The magic word is styled
    Can chain with HTML tag name, like span... then React component where that tag is
      the top level tag of the result
    Can use as an argument to styled the name of another React component
      Can even extend existing component, such as styled(Header)
  Either approach returns function that takes backtick string "tagged template literal"
    As an argument
    Internal JS mechanics going here
      That's why styled.span\css` rather than styled.span(\css`)
      Details are not important
      Important is JS backtick literal
      Can use ${} interpolations inside string
      Not preferred but can also pass a JS object with key/val instead of backtick string

  import * as React from "react"
  import styled from "styled-components"

  const Header = styled.span`
    font-size: 1.5rem;
    font-weight: bold;
    margin-left: 15px;
    margin-right: 15px;
  `

  interface VenueHeaderProps {
    seatsInRow: number
    changeHandler: (event: React.SyntheticEvent) => void
  }

  const options = seatsInRow => {
    const arrayOfNumbers = Array.from(Array(seatsInRow).keys())
    return arrayOfNumbers.map(i => (
      <option key={i + 1} value={i + 1}>
        {i + 1}
      </option>
    ))
  }

  export const VenueHeader = (props: VenueHeaderProps) => {
    return (
      <div>
        <Header>How many tickets would you like?</Header>
        <span className="select">
          <select onChange={props.changeHandler}>
            {options(props.seatsInRow)}
          </select>
        </span>
      </div>
    )
  }

  export default VenueHeader

Dynamic styled components
  Seat
  Keep Bulma-CSS styling
  Keep adjusting background color of seats depending on status
  Look at ButtonSquare in the middle of the file
    Start with a call to styled.span
    Now chain attrs method
      Takes a JS object as argument, merges that into props as passed to component
      Passing className as a prop
      React will interpret as CSS class, so get Bulma button class styling
      Can also take a function as an argument
    Now make sure background color changes
      Now Seat is passing status to ButtonSquare styled component
      The styled component converts that status into a color
  ButtonSquare is getting a prop
    Have interface to make sure right components
      Define SquareProps to take status being passed in and classNames being added
      If you use className, needs to be optional, so ?: syntax
    Within template literal, use props by adding functions to be interpolated into text
      background-color: ＄{props => stateColor(props.status)};
      Set color based on stateColor function
      stateColor same as before, but now out of Seat component
        Returning CSS colors directly, not Bulma class names
    A lil annoying to define interpolation as a function
      Instead of directly (＄{stateColor(props.status)})
      Seems you need the funcitonal version for props to be visible in interpolated version
    Also use props to define hover special status
      styled-components has full support for psuedo-elements and nested elements
      hover is lightblue in this case if state is open
        otherwise same as background color
    Add a static transition so colors fade in and out
    Finally call new ButtonSquare component as with any other React component
      <ButtonSquare status={status} onClick={changeState}>
        {seatNumber}
      </ButtonSquare>
    Pass props as with a regular component, including onClick prop
      Handled normally
      When seat status changes, prop changes
        ButtonSquare re-renders and recomputes background color
    If styled component wraps HTML element
      Any HTML attribute passed as prop is passed to underlying HTML
        Even if used as prop in defining styled component
    If wraps React component
      All props passed through

  import * as React from "react"
  import styled from "styled-components"

  const stateColor = (status: string): string => {
    if (status === "open") {
      return "white"
    } else if (status === "held") {
      return "green"
    } else {
      return "yellow"
    }
  }

  interface SquareProps {
    status: string
    className?: string
  }

  const ButtonSquare = styled.span.attrs({ className: "button" })<SquareProps>`
    background-color: ${props => stateColor(props.status)};
    transition: all 1s ease-in-out;
    border-width: 3px;

    &:hover {
      background-color: ${props =>
        props.status === "open" ? "lightblue" : stateColor(props.status)};
    }
  `

  interface SeatProps {
    seatNumber: number
    status: string
    clickHandler: (seatNumber: number) => void
  }

  export const Seat = ({ seatNumber, status, clickHandler }: SeatProps) => {
    function changeState() {
      clickHandler(seatNumber)
    }

    return (
      <td>
        <ButtonSquare status={status} onClick={changeState}>
          {seatNumber}
        </ButtonSquare>
      </td>
    )
  }

  export default Seat

// Also a special prop "as"
  Use if want outermost HTML tag to be something other than as defined by styled-components
  ButtonSquare is defined as styled.span
    If want div, <ButtonSquare as="div">
    
