Tuples, lists, aliasing, mutability, closing

Last time
  Decomposition
  Abstraction
  Achieved via functions
  Coherent, reusable code
  Lotsa functions from now on (yeah)

Two new data types
  Compound data types - made up of other data types
  Tuples, Lists

Ideas: Aliasing, mutability, cloning
Tuples:
  Similar to strings - sequences
  Collection of data of any type
  Contain elements - integers, strings, floats
  Tuples are immutable
  Once you create a tuple object, you can't modify it
    Just like e.g. a string
  Create tuple with parens
  te = ()
    Ruby: Tuple[]
  Don't confuse with function - nothing before parens
  te is an empty tuple
  t =
  You can index tuples like strings
  t[0] = 2
  Can concatenate like strings
  (2,"mit",3) + (5,6) = (2,"mit",3,5,6)
  t[1:2] evaluates to ("mit",)
    Extra comma represents tuple object
    Without comma, would just be a string (parens ignored)
  t[1:3] evaluates to ("mit",3)
  len(t) = 3 - number of elements
  t[1] = 4 error! can't change, just like strings
  Why use tuples? (I didn't really for sparkmesh)
    Convenient variable swap
      Instead of
        temp = x
        x = y
        y = temp
      (x,y) = (y,x)
    Return multiple values from function
      Functions only return a single object
        So I've been using tuples without realizing it here and there
      E.g. return quotient and remainder
    def qr(x, y)
      q = x // y #floor division)
      r = x % y
      return(q,r)
  Tuples hold collections of data
    Can have tuples within tuples
  Lists - very similar to tuples, but mutable
    Just like tuples, objects of any type
    Square brackets not parens
  L = [2, 'a', 4, [1,2]]
  len(L) -> 4
  L[0] -> 2
  L[2] + 1 -> 5
  L[3] -> [1, 2]
  L[4] -> Error - index outside list
  i = 2
  L[i - 1] -> 'a'
  Mutable
    L = [2, 1, 3]
    L[1] = 5 # now allowed
    L -> [2, 5, 3]
    Side effects happen
  Iterating through elements directly
  Common pattern
    total = 0
      for i in range(len(L)):
        total += L[i]
      print total

    total = 0
      for i in L
        total += i
      print total
    List elements indexed 0 to len(L) - 1
    range(n) goes from 0 to n - 1
  Add elements to end with L.append(element)
    L = [2, 1, 3]
    L.append(5) - mutates
    L = [2, 1, 3, 5]
  What is the dot?
    Think of it as an operation - apply to certain objects
    Append is a function applied to the list object - defined to work that way
  Can also add with plus operator
    Does NOT mutate list, creates new list
    Mutate list with list.extend([a, b])
      attaches each element individually
      whereas append attaches list as single element (problem example #3)
  Can also delete from lists
    del(L[index])
    L.pop() - remove from end, returns removed element
    L.remove(element) remove a specific element
      Removes first occurence only
      If not in list, gives an error
    Ruby different:
      .delete removes all instances
      li.delete_at(li.index(n) || li.length) removes first instance
      bleah
  These functions all mutate the list
    But be careful with return values!
    Will often return value None
    L.remove(2) = None
  Converting strings to lists and vice versa
    list(s) - each character
      Ruby: s.split("")
    s.split - at specific spots
    ''.join(L)
  Sorting
    L = [9, 6, 0, 3]
    sorted(L) -> returns new list that is sorted
    L.sort() mutates [0, 3, 6, 9]
    L.reverse() mutates again [9, 6, 3, 0]
  If you have more than one variable pointing to object
    All will give you the changed value
    Key phrase - what side effects could happen?
  Example
    Justin Bieber is pointed to by many different names - Biebs, JB
      Attributes: singer, rich
      Add attribute: troublemaker
    All of his nicknames refer to same person
    All aliases will point to changed object
    a = 1
    b = a
    print(a)
    print(b)
    1
    1
    a = 2
    print(a)
    print(b)
    2
    1
    warm = ["red", "yellow", "orange"]
    hot = warm
    hot.append('pink')
    print(hot)
    print(warm)
    ["red", "yellow", "orange", "pink"]
    ["red", "yellow", "orange", "pink"]
  To create new copy of list, just clone it, no side effects
    chill = cool[:]
    Ruby
      array.map(&:itself)
  More complicated example (see code)
    sort vs. sorted
    array.sort() mutates the list returning nothing
  Be careful if iterating over list modifying list
    Removing element will move elements to new index in real time

Book notes
  Tuples - concatenate, index, slice like strings
  Range - another immutable type we skipped in class
    range(10)[2:6][2] = 4
    evals true if contains same integers
    range(0, 7, 2) == range(0, 8, 2)
    Ranges are small compared to tuples, fully defined by start:stop:step
    This is why you'd ever use them outside for loops
  Python has a built-in function id(obj) you can use to see if same
    Ruby: obj.object_id
  Unintentional aliasing can lead to very tricky bugs (as I've found out)
  list.count(x) returns number of instances of x in list (same in Ruby)
  copy.deepcopy to copy lists with internal structure
  List comprehension
    L = [x**2 for x in range(1,7)]
    Kinda hinted this can be used in cool ways but tough to read later
  Functions have type built-in_function_or_method
    Send in as argument to applyToEach function
    (See example I coded)
  The map function is a built-in, more general version of applyToEach
  for i in map(fib, [2, 6, 4])
    print i
  2
  13
  5
  first argument to map can be a function of n arguments
  must be followed by n subsequent ordered collections
  L1 = [1, 28, 36]
  L2 = [2,57, 9]
  for i in map(min, L1, L2):
    print i
  Ruby:
    a.map { |i| Math.sqrt(i) }
  Create anonymous functions using reserved word lambda
  L = []
  for i in map(lambda x, y: x**y, [1, 2, 3, 4], [3, 2, 1, 0]):
    L.append(i)
  print(L)
  Ruby
  a = [1, 2, 3, 4]
  double_up = lambda { |num| num * 2 }
  a.map { |i| double_up.call(i) }