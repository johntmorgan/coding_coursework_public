Iterative Statemeents
  Repeated execution

LOOP
  Most basic
  Any statements between LOOP and END LOOP repeated until condition is met
  LEAVE to break processing
    IF condition THEN LEAVE;
  ITERATE to ignore processing and start new iteration of loop

WHILE
  Alternative way to do it
  Easier to understand, terminating condition at start between WHILE and DO
    (Where LOOP you write it somewhere inside the LOOP)

REPEAT
  Like WHILE but terminating condition at end of loop
    At least one iteration always performed
    Post-test loop (vs. WHILE pre-test loop)
  Termination condition written after UNTIL

Example - LOOP

  // Stored procedure, OUT param used to pass string containing names
  // First find total number of rows and store in TotalRows
  // If row less than TotalRows proceed, otherwise loop terminated
  // Cumbersome way to create a list of names, just an example
    // Could just do a SELECT query with Gender in the WHERE clause
  DELIMITER **
  CREATE PROCEDURE PrintMaleActors(
         OUT str  VARCHAR(255))
  BEGIN
    DECLARE TotalRows INT DEFAULT 0;
    DECLARE CurrentRow INT;
    DECLARE fname VARCHAR (25);
    DECLARE lname VARCHAR (25);
    DECLARE gen VARCHAR (10);

    SET CurrentRow = 1;
    SET str =  '';

    SELECT COUNT(*) INTO TotalRows
    FROM Actors;

    Print_loop: LOOP
      IF CurrentRow > TotalRows THEN
        LEAVE Print_loop;
      END IF;

      SELECT Gender INTO gen
      FROM Actors
      WHERE Id = CurrentRow;

      IF gen NOT LIKE 'Male' THEN
        SET CurrentRow = CurrentRow + 1;
        ITERATE Print_loop;
      ELSE
        SELECT FirstName INTO fname
        FROM Actors
        WHERE Id = CurrentRow;

        SELECT SecondName INTO lname
        FROM Actors
        WHERE Id = CurrentRow;

        SET  str = CONCAT(str,fname,' ',lname,', ');
        SET CurrentRow = CurrentRow + 1;
      END IF;
    END LOOP Print_loop;
  End **
  DELIMITER ;

  CALL PrintMaleActors(@namestr);
  SELECT @namestr AS MaleActors;

Example - WHILE

  // WHILE loop labeled as Print_loop
  //

  DROP PROCEDURE PrintMaleActors;

  DELIMITER **

  CREATE PROCEDURE PrintMaleActors(
      OUT str  VARCHAR(255))
  BEGIN

  DECLARE TotalRows INT DEFAULT 0;
  DECLARE CurrentRow INT;
  DECLARE fname VARCHAR (25);
  DECLARE lname VARCHAR (25);
  DECLARE gen VARCHAR (10);

  SET CurrentRow = 1;
  SET str =  '';

  SELECT COUNT(*) INTO TotalRows
  FROM Actors;

  Print_loop: WHILE CurrentRow < TotalRows DO
   SELECT Gender INTO gen
   FROM Actors
   WHERE Id = CurrentRow;

   IF gen LIKE 'Male' THEN
     SELECT FirstName INTO fname
     FROM Actors
     WHERE Id = CurrentRow;

     SELECT SecondName INTO lname
     FROM Actors
     WHERE Id = CurrentRow;

     SET  str = CONCAT(str,fname,' ',lname,', ');
   END IF;

   SET CurrentRow = CurrentRow + 1;
  END WHILE Print_loop;

  End **

  DELIMITER ;

Example - REPEAT

  DROP PROCEDURE PrintMaleActors;

  DELIMITER **

  CREATE PROCEDURE PrintMaleActors(
      OUT str  VARCHAR(255))
  BEGIN

  DECLARE TotalRows INT DEFAULT 0;
  DECLARE CurrentRow INT;
  DECLARE fname VARCHAR (25);
  DECLARE lname VARCHAR (25);
  DECLARE gen VARCHAR (10);

  SET CurrentRow = 1;
  SET str =  '';

  SELECT COUNT(*) INTO TotalRows
  FROM Actors;

  Print_loop: REPEAT
   SELECT Gender INTO gen
   FROM Actors
   WHERE Id = CurrentRow;

   IF gen LIKE 'Male' THEN
     SELECT FirstName INTO fname
     FROM Actors
     WHERE Id = CurrentRow;

     SELECT SecondName INTO lname
     FROM Actors
     WHERE Id = CurrentRow;

     SET  str = CONCAT(str,fname,' ',lname,', ');
   END IF;

   SET CurrentRow = CurrentRow + 1;
   UNTIL CurrentRow > TotalRows
   END REPEAT Print_loop;

  End **

  DELIMITER ;