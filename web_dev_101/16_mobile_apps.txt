Mobile Apps
  60-70% of users are mobile these days
  Mobile accessible, easy to use
    Carry with us everywhere
    Don't need to be tech-savvy (well... -JM)
  Businesses are mobile-first more and more
    Mass gaming
    Many games switched from Facebook (Zynga)
      to mobile-first or only (Clash of Clans)
  Google Play Store
    2B monthly active users
    3.5 million apps
    82 billion app downloads

  Before designing a mobile app
    Do thorough market research
    Mobile devices have the market pen, majority of traffic
    No one-size-fits all strategy for businesses
    Author's site gets 80% from desktop still
      Doing fine with no mobile app
    Writing a mobile app has significant costs
      May need a dedicated mobile team
      Write by yourself? Steep learning curve.
    Handheld devices are battery powered
      Resources (CPU, storage, RAM, data) are limited
      User patience is limited
    Requires completely different mindset

  Mobile-only
    TikTok (not anymore - JM)
    Pok√©mon Go

  Mobile-first
    UI designed with idea most users come through mobile client
    Desktop-based interface is secondary
      May contain fewer features
    Designers start with mobile
      Build desktop, tablet, etc. after
    Myntra.com
      70% revenue, 90% traffic mobile
      Eventually killed desktop website
      But reopened it due to customer demand for both options

  Mobile-friendly
    Responsive
      Built for desktop originally
      Grid-based design
      Adapt depending on screen size
      "Web-first", "desktop-first"
      Don't do anything additional for mobile
        But hitch may not control on all devices
        Parts of page may be hidden or render poorly
          Can write CSS media queries, still not as good as mobile-first

  What to choose?
    How are users in same niche accessing their sites?
    Do businesses in niche have apps up on app stores?
      How many downloads does app have?
      What are primary traffic and social discovery sources?
    What is revenue generation?
      Of course business may not be public with this
      Lots of fremium tools with browser extensions - just Google
    Type of service offered
      Say health niche, track eating, suggest healthy alternatives
        Some social features for user engagement and retention
        Mobile a good idea
          Don't make user open laptop for every meal
        Also have a web-based interface
          Good to have, not a necessity
          Firebase can write an app without much backend setup time
    Case study
      Pixel Federation, game: Seaport
      2015 launch
      Desktop start
      2017 mobile
        8.1m downloads
        7.6m euros earned
      Today
        305k daily active users
        50k desktop
          However, almost 1/3 of game revenue

  Responsive Interface
    Two approaches, mobile-first and web-first
    Not possible for developers to maintain detailed user interfaces for every screen size
      Smart TV, Kindle, IoT, Blackberry, Windows Phone, iPhone, iPad... etc
    So responsive interface solution
      Should be like water, take shape of vessel poured into
    Design
      If not designer, what to do?
      More of a backend developer
        Pick BootstrapJS, period
      BootstrapJS
        Production-grade open-source CSS framework for designing responsive user interfaces
          Animations, typography, form elements, buttons, etc.
          Everything is preloaded
        Create grid, plug together, build site
          Lots of ready-made templates and plugins (open source)
        Author has used a lot - more of a full-stack developer
          Learning curve not too steep
            Take less than a week if you're used to frontend already
        Originally created by Twitter
          To have consistency across all user interfaces of internal tools
          Before, struggled with maintenance
          Later released project as open source
      jQuery mobile
        Developed & maintained by jQuery team
        jQuery losing popularity fast now
          Most features offered by modern browsers with vanilla JS
            Little code required
      Other options
        Skeleton
        HTML5 Boilerplate
        Less Framework

  Types of mobile apps
    Two types
      Native
      Hybrid
    Native
      Built exclusive for specific operating system
      Only work on OS built for
      Interact directly with operating system
      Full access to hardware - camera, sensors
      High performance
      Consistent interface
        Match look and feel of native OS
      No lag on UI animations
      Developed via APIs and SDKs provided by native OS
      Ex
        Android LinkedIn, Tinder, Hike
      Techs for native
        Every mobile OS supports a set
        Android
          Java
          Kotlin
          C++
        iOS
          Swift
          Objective C
          Cocoa Touch

    Hybrid
      What the name says - hybrid between native and web-based
      Like native:
        Installed from app store
        Can access device hardware
        Communicate with device OS
      Built with open web-based technologies
        HTML5
        CSS
        JavaScript
      Run in native container
        Communicate via wrapper/middle layer
      Slower than native due to wrapper
      Techs
        React-Native
        Ionic
        Cordova
      React-Native
        Open source mobile app development framework
        Written in JS
        Developed by Facebook
        Used by
          Bloomberg
          Walmart
          Uber Eats
          Discord
      Apache Cordova
        Open-source
        By Adobe
        Use HTML, JS, CSS
        Ecosystems built on
          Ionic Framework
          PhoneGap
      Ionic
        Open-source SDK
        Build on Cordova and AngularJS
        Used by big guns
          EA, GE, Amtrak
      Flutter
        Open-source
        Built by Google

  Why hybrid?
    When writing native apps, need dedicated app for every platform
    No shared tech supported by all platforms
      Need dedicated team for every platform
    And what if a new OS pops up in the future?
    When starting, do not have resources for dedicated teams for every platform
    So starting up, hybrid way to go?

  Why native?
    Hybrid apps are not as performant
      Even if they claim it!

  Real-life hybrid/mobile
    Airbnb
      Built desktop with React
      Use React-Native for mobile
        Single codebase for both desktop and mobile
      Eventually abandonded
        Performance issues
          Initialization
          Render time
          App launch screen
          Navigating between screens
        Dropped frames
      Wrote several patches for React-Native to get designed functionlity
        Some would be trivial with native tech
      Lack of type safety in JS made it hard to scale
        Difficult for engineers used to type-safety checks
        Refactoring extremely difficult

    Udacity
      Built with React-Native
      Switched due to Android-specific user requests
      Long-term RN codebase maintenance costs high
      Cross-platform UX consistency issues

    Facebook
      Back in 2012
      Betting big on HTML5 was a mistake

  Choosing
    Native
      Heavy graphic and hardware requirements
        Mobile game
        Video editor
        Game streaming
      UI animations
        Fancy social app
        Finance app with real-time charts & graphs
      Hardware access required
        GPS
        Sensor-based health
        Step tracker
      Look and feel must be just like native OS
        UI needs to be flawless
      Competition
        Other businesses in niche with native apps
          Users these days install less apps! (Yep I believe it - JM)
      Need to support OS features on release
      Business can afford dedicated Android and iOS teams
        Don't even think about hybrid approach
    Hybrid
      Simple requirements
        Not adding complexity any time soon
        News app
      Cannot afford dedicated codebases for multiple platforms
        Either launch with one native app or write a hybrid
      Test waters with pre-alpha, MVP
      Team not fluent with native technologies

  Progressive web apps
    Have look and feel of native apps but can run in both mobile and desktop browsers
    Install on user's device right from browser
      Don't go through web store
    Open in own window without address bar or browser tab, just liike native
    Why PWAs?
      Increasing trend vs. responsive websites
      Have the same look and feel as native apps
      General flow
        Take traffic from search engine
        Direct to native mobile apps
      But now
        Same native app experience directly in browser
        Can also install app from browser to device
      Techs
        HTML, CSS, JS
        Frameworks
          Angular
          React
          Ionic
          Google Polymer
      No native tech learning curve
      Write once, run everywhere
      Can even be installed on desktops
    Will PWAs replace native apps?
      No, native apps still key for use cases discussed before
      Don't write a mobile game this way!
      More in competition with responsive mobile websites
    Examples
      BookMyShow PWA
        India's ~Ticketmaster
        75m monthly visitors
        High bounce rate on mobile
        Replaced with PWA
        80% conversion increase
        54 times lighter than Android app
        180 times ligther than iOS app
      Flipkart PWA
        India's leading retail e-commerce site
        Shut down mobile website
        3x engagement
        70% conversion rate increase
      Twitter
        2017 PWA launch
        Default mobile web experience
        65% pages per session increase
        20% bounce rate decrease
        75% tweet increase

  Mobile backend as a service (MBaaS)
    Cloud-based service model
    Takes care of backend infrastructure of mobile app
    Let coders focus on business logic, UI
    What does it take care of?
      User authentication
      Social network integration
      Push notifications
      Real-time database
      Caching
      Data storage
      Messaging
      Chat integration
      Third-party tools integration
      Analytics
      Crash reporting
    Makes life much easier during bootstrapping phase
      Not possible to cover all that stuff without a team otherwise
    Freemium, cloudbased
    Don't worry about early app hosting costs
      Generous free tiaer
    Offers API for every feature
    Techs
      Google Firebase
      AWS Amplify
      Parse
        Early leader, bought and shut down by Facebook
    When MBaaS?
      Mobile-only services
      Don't need or don't already have custom backend up and running for service
      All business logic resides on client, which is the mobile app
        Fat/thick client
      Best for
        Mobile games
        Messaging apps
        To-do list type apps
    Keep in mind
      Have to keep business logic on the client
      If ever need business logic on server due to new feature
        Design custom backend from bare bones
    Alternative
      Start with custom backend, then write a mobile client
        Conventional approach
        Always customize design of service
        Introduce new clients easily
    Do both?
      Integrate legacy enterprise system with mobile app
      Need to leverage some additional features that custom backend server hosts
      Ex banking app
        Using MBaaS
        But needs to interact with legacy enterprise backend
          Cross-verify data entered by user every time
    Big downside
      Vendor lock-in
      What if your vendor gets shut down like Parse?
      What if vendor stops upgrading?
        Serious security flaws?
      What if billing rules change?
