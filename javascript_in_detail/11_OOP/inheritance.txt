Inheritance
  Ability for class to take properties of another class
  Derives a new class based on a pre-existing one
  Base class inherits from super class
  Inheriting from multiple classes supported
    Hierarchical inheritance

Inheritance in JS
  Via manipulating object prototypes
    "Prototypal inheritance"

  let vehicle = { wheels : 4 }; // object assigned to variable named vehicle
  let car = {
      seats : 5,
      __proto__ : vehicle // __proto__ property assigned to vehicle
  }; // object assigned to variable named car

  // Print all objects and __proto__ property for each variable
  console.log(`vehicle:`, vehicle, vehicle.__proto__);
  console.log(`car:`, car, car.__proto__);
  console.log(`vehicle seat:`,vehicle.seats);
  console.log(`car wheels:`, car.wheels);
    > car wheels: 4

  Assign car object's __proto__ property to variable vehicle

  Let's see multi-level

  let vehicle = { wheels : 4 }; // object assigned to variable named vehicle
  let car = {
      seats : 5,
      __proto__ : vehicle // __proto__ property assigned to vehicle
  }; // object assigned to variable named car
  let bmw = {
      price : 50000,
      owner : "Bob",
      __proto__ : car, // __proto__ property assigned to car (inherits car)
  };// object assigned to variable named bmw
  // Print all properties of bmw object
  console.log("BMW price:",bmw.price);
    > BMW price: 50000
  console.log("BMW owner:",bmw.owner);
    > BMW owner: Bob
  console.log("BMW seats:",bmw.seats);
    > BMW seats: 5
  console.log("BMW wheels:",bmw.wheels);
    > BMW wheels: 4

    __proto__ property "traversed" when property not found in current object
    Traverses to next object until found or null is reached
      Chaining objects "prototypal chaining"

In constructor functions
  All objects created through constructor share same prototype property __proto__
  All objects inherit props from constructor functions
  If prototype modified, all objects' inherited properties modified

  function Employee(_name, _age, _designation){
    // Properties assignment passed as arguments
    this.name = _name;
    this.age = _age;
    this.designation = _designation;
    // Method
    this.setAge = newage => {
      console.log(`setting age from ${this.age} to ${newage}`)
      this.age = newage;
    }
    // Property assigned by constructor function
    this.company = 'Amazon';
  }

  var employee1 = new Employee('Mark', 20, 'Manager'); // create Employee object
  var employee2 = new Employee('Bob', 30, 'Accountant'); // create Employee object

  // create new property in the prototype object for all objects to inherit
  Employee.prototype.gender = 'male';

  // print objects
  console.log(employee1.name, ' is ', employee1.gender);
    > Mark  is  male
  console.log(employee2.name, ' is ', employee2.gender);
    > Bob  is  male

Constructor inheriting from another constructor
  Call method

  function Human(_name,_age){
    // Properties assignment passed as arguments
    this.name = _name;
    this.age = _age;
    // Property assigned by constructor function
    this.arms = 2;
    this.legs = 2;
  }

  function Employee(_name, _age, _designation){
    // Properties assignment passed as arguments
    Human.call(this, _name, _age);
    this.designation = _designation;
    // Method
    this.setAge = newage => {
      console.log(`setting age from ${this.age} to ${newage}`)
      this.age = newage;
    }
    // Property assigned by constructor function
    this.company = 'Amazon';
  }

  var employee1 = new Employee('Mark', 20, 'Manager'); // create Employee object
  // create new property in the prototype object for all objects to inherit
  Employee.prototype.gender = 'male';
  Human.prototype.feet = 2;
  // print objects
  console.log(employee1.name, ' is ', employee1.gender);
    >  Mark  is  male
  console.log(employee1.name, ' is ', employee1.age);
    > Mark  is  20
  console.log(employee1.name, ' has ', employee1.arms, ' arms');
    > Mark  has  2  arms
  console.log(employee1.name, ' has ', employee1.feet, ' feet');
    > Mark  has  undefined  feet

  Employee inherits from Human constructor function
  Remove age and name from Employee, already in Human
  Inherit all props with call
  When add a new property to Human constructor prototype object
    It is NOT accessible
    call adds Human props but lacks prototypal chaining

  To fix

  Employee.prototype = Object.create(Human.prototype); // assign human prototype
  Employee.prototype.constructor = Employee; // create constructor property