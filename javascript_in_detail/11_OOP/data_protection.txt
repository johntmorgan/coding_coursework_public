Data Protection in OOP
  Can be important for properties to be hidden or stay inside an object
  Data encapsulation takes 2 approaches

Hiding properties
  Up to now, all function and class properties accessible outside class
    Modified with no restrictions
  In ES5 and ES6, no formal support for access modifiers
    public, private, protected
      Used by other languages

Hiding in constructor
  Use var definition instead of this.property

  function Employee(name, age, designation){
    // Properties assignment passed as arguments
    this.name = name;
    var _age = age;
    this.designation = designation;
    // Method
    this.setAge = newage => {
      console.log(`setting age from ${_age} to ${newage}`)
      _age = newage;
    }
    this.printAge = () => {
          console.log(`${this.name} is ${_age} years old`);
      }
    // Property assigned by constructor function
    this.company = 'Amazon';
  }

  var employee1 = new Employee('Mark', 20, 'Manager'); // create Employee object

  console.log("employee1 age:",employee1.age, employee1._age)
    > employee1 age: undefined undefined
  employee1.printAge(); // Print Age
    > Mark is 20 years old

  Using var _age limits scope of variable to inside constructor function
  Can only access it via printAge or setAge
    Accessible to function methods through lexical scope and lexical bounding
  Note, name _age instead of age b/c good convention
    Name internal props with leading "_"

Hiding properties in a class
  Use var property instead of this.property in constructor
  Not accessible outside constructor - note printAge now in constructor!

  class Employee{
      constructor(name, age, designation){
          // Properties assignment passed as arguments
          this.name = name;
          var _age = age;
          this.designation = designation;
          // Method
          this.setAge = newage => {
              console.log(`setting age from ${_age} to ${newage}`)
              _age = newage;
          }
          this.printAge = () => {
                  console.log(`${this.name} is ${_age} years old`);
              }
          // Property assigned by constructor function
          this.company = 'Amazon';
      }
      // Methods defined outside the constructor
      
  }