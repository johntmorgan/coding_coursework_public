Functional programming
  Create specialized functions that complete certain tasks
  Programmers rely on abstractions and expect the function to work
    Can lead to chaining multiple functions
    To beatify code, use function composition

Intro
  Function composition
    Result of one function passed to next, then next, etc until final
    Can be composed of any number of functions
  Curry functions
    Take argument, return function which also takes one argument

    var add = function (a){
        return function(b){
            return a + b;
        }
    }

    var func_add_2 = add(1); // return a function which adds 1 to the argument
    var final_output = func_add_2(5);
    console.log(final_output);
      > 6

    // More direct
    final_output = add(1)(5);
    console.log(final_output);
      > 6

    // More than 2 functions

    var add = function (a){
        return function(b){
            return function(c){
                return a+ b +c;
            }
        }
    }

    // invoke the function with 3 consecutive invocations
    var final_output = add(1)(5)(6);
    console.log(final_output);
      > 12

Function composition
  Typically in one of the following formats

  const double = x => x * 2
  const square = x => x * x

  // Traditional approach
  var output1 = double(2);
  var output2 = square(output1);
  console.log(output2);

  // variant two
  var output_final = square(double(2));
  console.log(output_final);

  // But there is a cleaner way

  const compose = (f, g) => x => f(g(x)); // function composition of two functions
  const double = x => x * 2
  const square = x => x * x

  // function composition
  var output_final = compose(square, double)(2);
  console.log(output_final);
    > 16

  compose function takes two functions as args
    returns single function with only one arg
    That argument is composed of invoking all the functions passed as an arg to the compose function

compose function
  Generalize as follows
  Takes any number of functions and invokes one after other

    const compose = (...fns) => x => fns.reduceRight((y, f) => f(y), x);

    compose variable assigned to function
    ...fns packs all arguments passed and adds to array using ... operator, assigns to fns
    The compose function returns another function which takes it as an argument x
    The inner function uses the x value and the fns array to use the reduceRight method on the fns array
      it reutnrs the value where the initial value of the method is x
      The reduceRight method takes a function, invokes it with x argument, then continues it with rest of functions
      The next function receives the result of the first output and so on

    // function composition of any number of functions
    const compose = (...fns) => x => fns.reduceRight((y, f) => f(y), x); 
    const double = x => x * 2
    const square = x => x * x

    // function composition
    var output_final = compose(square, double)(2);
    console.log(output_final);

pipe function
  Reverse the order of function invocation

    const pipe = (...fns) => x => fns.reduce((y, f) => f(y), x);
    const double = x => x * 2
    const square = x => x * x

    // function pipe
    var output_final = pipe(square, double)(2);
    console.log(output_final);
      > 8

    Libraries for composition
      Ramda: compose and pipe
      Lodash: flowRight (compose) and flow (pipe)