Fast and Slow Pointers
  Similar to two pointers pattern
  Traverse iterable data structure at different speeds
  Usually used to identify distinguishable features of directional structures
    Linked list, array
  Pointers can traverse in either direction
  Usually slow moves +1, fast moves +2 in each step
    But adjust for problem
  Used to determine data structure traits
    Commonly used to detect cycles
    "Floyd's cycle detection algorithm"
    If no loop, fast finishes first
    If loop, slow eventually meets

Examples:
  Delete nth node from end of linked list
    Fast jumps out by n + 1, slow by 1
    Both advance by 1
    When fast points to null, delete slow

Pattern matching:
  Yes:
    Either intermediate or solution requires identifying
      First x% elements of list
      Element at k-way point in linked list
        Middle, start of second quartile, etc.
      kth last element in linked list
    Must detect cycle in linked list
    Detect cycle in sequence of symbols
  No:
    Input data cannot be traversed in linear fashion
      Not in array or linked list
    Problem can be solved with two pointers traversing same pace

Real-world
  Symlink vertification
    Operating system
    Symlink = shortcut to another file
    Can easily create loops or cycles
    Utility detects loop by moving at different speeds
  Compiling OOP
    Identify and remove cyclic dependencies