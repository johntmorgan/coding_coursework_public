Greedy
  Solution built piece by piece
  Max profit, miniize cost at every point
  Fractional knapsack problem
    Choose highest value vs. weight ratio
    Leads to globally optimal solution because can also take fractions of item
  Greedy algorithm never goes back and reversed decision
  Sometimes fails to find globally-optimal solution because does not consider all data
    But many implementations of approach later in chapter
      Dijkstra
      Kruskal
  Advantages
    Easy to devise vs. binary search, dynamic programming, functional programming
    Easy to compute running time
      Divide & conquer: size of problem shrinks but number of subproblems increase
  Disadvantages
    Unoptimized solution
      Small step first may lead to large step later
    Proof of correctness
      Hard to understand
      Hard to prove correct
        Use contradiction often

Spanning trees
  Within a graph G, subset of G that covers all vertices with minimum edges
    Therefore cannot be disconnected
    Cannot have any cycles
    Must consist of n - 1 edges where n is the number of vertices
  Graphs can have more than 1 spanning tree
    Complete graph can have max n(n-2) spanning trees

Prim's algorithm
  Greedy again
  Chooses optimal path at each point, making spanning treee
  Steps
    Remove all self-loops
    Remove all parallel edges
      If two nodes have a parallel edge, keep cheapest
    Select random node, pick outgoing with least cost
    Continue until all nodes visited
    Time complexity (VlogV + ElogV) = O(ElogV)

Kruskal
  Also for MST
  Create forest F, each vertex is a separate tree
  Create sorted set S of all edges in graph
  While S is nonempty and F is not yet spanning
    Remove edge with minimum weight from S
    If removed edge connects two trees then add it to the forest

Dijkstra
  Shortest path of all nodes/vertices from selected node
  Maintain array of distances to vertices
  Maintain array of visited vertices
  Select start
  Initiailize distance array at infinite
  Update distance of selected vertex from 0
  Update neighbors with respective edge costs
  Select neighbor with shortest path out
  Update vertex
  Add to visited array
  For all neighbors, check whether D[current] + cost[current -> neighbor] < D[neighbor]
  Repeat until all vertices visited