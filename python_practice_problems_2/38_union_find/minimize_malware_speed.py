#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Mar  9 16:17:45 2023

@author: johnmorgan
"""
from collections import defaultdict
from union_find_4 import *

# Review - had to look at solution again, not comfortable using union_find functions
# O(n^2)
# O(n) space

def min_malware_spread(graph, initial):
    n = len(graph)
    union_find = UnionFind(n)
    for x in range(n):
        for y in range(n):
            if graph[x][y]:
                union_find.union(x, y)
    infected = defaultdict(int)
    for x in initial:
        infected[union_find.find(x)] += 1
    maximum_size, candidate_node = 0, min(initial)
    for i in initial:
        infection_count = infected[union_find.find(i)]
        component_size = union_find.sizes[union_find.find(i)]
        if infection_count != 1:
            continue
        if component_size > maximum_size:
            maximum_size = component_size
            candidate_node = i
        elif component_size == maximum_size and i < candidate_node:
            candidate_node = i
    return candidate_node

graph = [[1,0,0],[0,1,0],[0,0,1]]
initial = [0,2]
print(min_malware_spread(graph, initial))