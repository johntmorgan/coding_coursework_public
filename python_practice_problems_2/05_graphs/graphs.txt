Graphs
  Key for
    GPS
    Neural networks
    Peer-to-peer networks
    Search engine crawlers
    Garbage collection (Python)
    Social networking sites
  Two key components
    Vertex
    Edge
  Graph terminology
    In-degree: incoming edges of a vertex
    Out-degree: outgoing edges of a vertex
    Parallel edges:
      Undirected: same end vertices
      Directed: same start and end vertices
    Self loop:
      Start and end on same vertex
    Adjacency:
      Edge connects directly
  Types
    Undirected
      Bi-directional edges
      Maximum number of edges: n(n - 1) / 2
    Directed:
      Unidirectional
      Max number of edges: n(n - 1)
  Representation
    Adjacency matrix
      2D matrix, 0 or 1 in every spot
        For directed graph, row = source, column = destination
    Adjacency list
      Array of linked lists
  Implementation
    Directed graph

    class Graph:
    def __init__(self, vertices):
        # Total number of vertices
        self.vertices = vertices
        # Defining a list which can hold multiple LinkedLists
        # equal to the number of vertices in the graph
        self.array = []
        # Creating a new LinkedList for each vertex/index of the list
        for i in range(vertices):
            # Appending a new LinkedList on each array index
            self.array.append(LinkedList())

    def add_edge(self, source, destination):
        if (source < self.vertices and destination < self.vertices):
        # As we are implementing a directed graph, (1,0) is not equal to (0,1)
            self.array[source].insert_at_head(destination)
        # If undirected, also:
          # array[destination].insert_at_head(source)

    def print_graph(self):
        print(">>Adjacency List of Directed Graph<<")
        for i in range(self.vertices):
            print("|", i, end=" | => ")
            temp = self.array[i].get_head()
            while temp is not None:
                print("[", temp.data, end=" ] -> ")
                temp = temp.next_element
            print("None")

    from Graph import Graph

    g = Graph(4)
    g.add_edge(0, 2)
    g.add_edge(0, 1)
    g.add_edge(1, 3)
    g.add_edge(2, 3)

    g.print_graph()

    print(g.array[1].get_head().data)

  Notes
    add_edge will not work if source < 0 or > number of vertices
      destination also must be within range
      in production code, cover error handling of these edge cases
    What is the time complexity of add_edge and print_graph?

Time complexity:
  Adjacency list:
    Add vertex O(1)
    Remove vertex O(V + E)
      Delete all edges, reindex rest of list back one step
    Add edge O(1)
      Just insert at head of vertex
    Remove edge O(E)
      All edges could be at one vertex, traverse to reach last
    Search O(V)
      If have to traverse all vertices
    BFS O(V + E)
    DFS O(V + E)

  Adjacency matrix:
    Add vertex O(V^2)
      Need to add rows & columns and fill
    Remove vertex O(V^2)
    Add edge O(1)
      Just manipulate value in cell
    Remove edge O(1)
    Search O(1)
      Access by indexing
    BFS O(V^2)
    DFS O(V^2)

  Adjacency list for frequent vertex manipulation
  Adjacency matrix for frequent edge manipulation
    (And dense graphs... - JM)

Bipartite graph
  Vertices divided into two disjoint parts
  No vertices in same part are adjacent to each other
  K-partite graph - more general (bipartite - k = 2)
  All acyclic graphs can be bipartite
  Cyclic graphs can be bipartite
    If and only if they contain even # of vertices
  Popular types
    Star
    Acyclic
    Path

Graph traversal
  BFS, DFS review

  Kosaraju Connected Component Theorem
    Find mother node (all reachable from node) in O(V + E) time
    Begin DFS on node
      If all visited, you're done
      If not all visited, not mother node
    DFS from next non-visited node
    Last non-visited node is only possible mother node
      (Others have all failed to get there)
    Reset and test visited from possible mother node

Trees
  No cycles
  Graph is connected
  