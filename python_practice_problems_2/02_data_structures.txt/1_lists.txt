Lists
  Ordered sequence of heterogenous elements
  Can hold different data types
    list = ['a', 'apple', 23, 3.14]
    empty_list = []
    sequence_list = list(range(10))
      Ranges 0 to n - 1 in Python
  Can also hold other lists
  Can invoke functions inside list
    def foo():
      print('Hello!')

    list = [foo]
    list[0]()

Built-in list functions & time complexity
  list.append(elem) - O(1)
  list.insert(idx, elem) - O(n)
  list.remove(elem) - O(n)
    Error if list does not contain elem
  list.pop(idx) - O(1)
    Remove and return element
    No idx, removes last element - O(1)
    With idx - O(k) where k < n
  list.reverse() - O(n)

Slicing
  Don't need to use a for loop to access multiple objects
  list[start:end]
    Start included, end not included!
  list = list(range(10))
  print(list)
  print(list[0:4])
  Can leave start or end blank
  list[:] returns all numbers within range

Stepped indexing
  list[start:stop:step]
  Like C++
  for(int i = 0; i < 10; i += 2) {
    cout << arr[i] << end;
  }
  list = list(range(10))
  print(list[0:9:2])
  print(list[9:0:-2])

Initializing list
  x = list(range(5))
  x[1:4] = [45, 21, 83]

Deleting elements
  list = list(range(10))
  del list[::2]

Negative indexing
  list = list(range(10))
  print(list[4:-1])

Slicing in strings
  string = "mystring"
  string1 = mystring[:4]
  string2 = mystring[4:]